{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\weather\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//   const [activeCity, setActiveCity] = useState('Delhi');\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n//   const [lastUpdated, setLastUpdated] = useState(null);\n\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n\n//   const getWeatherData = async (city) => {\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch weather data');\n//       }\n//       const data = await response.json();\n//       setWeatherData(data);\n//       setError(null);\n//       setLastUpdated(new Date().toLocaleTimeString());\n//     } catch (err) {\n//       setError(err.message);\n//       setWeatherData(null);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial data fetch\n//     getWeatherData(activeCity);\n\n//     // Set up interval to fetch data every 5 minutes\n//     const intervalId = setInterval(() => {\n//       getWeatherData(activeCity);\n//     }, 300000); // 300000 ms = 5 minutes\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, [activeCity]);\n\n//   const handleTempUnitChange = (unit) => {\n//     setTempUnit(unit);\n//   };\n\n//   const convertTemperature = (tempK) => {\n//     if (tempUnit === 'F') {\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\n//     }\n//     return (tempK - 273.15).toFixed(2);\n//   };\n\n//   const formatTimestamp = (timestamp) => {\n//     return new Date(timestamp * 1000).toLocaleTimeString();\n//   };\n\n//   return (\n//     <section>\n//       <div className='container'>\n//         <div className='row mt-5'>\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\n//             Weather Data\n//           </div>\n//         </div>\n//         <div className='row'>\n//           <div className='col-lg-12 p-5 text-center'>\n//             <div className='btn-group'>\n//               {cities.map((city) => (\n//                 <button\n//                   key={city}\n//                   className={`btn btn-outline-dark fw-bold ${\n//                     activeCity === city ? 'active' : ''\n//                   }`}\n//                   onClick={() => {\n//                     setActiveCity(city);\n//                     getWeatherData(city);\n//                   }}\n//                 >\n//                   {city}\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//         <div className='row mb-5'>\n//           <div className='container p-5 feedback-box'>\n//             <div className='row'>\n//               <h3 className='text-center'>\n//                 {activeCity} Weather Data\n//               </h3>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-12 text-center'>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='celsius'\n//                     checked={tempUnit === 'C'}\n//                     onChange={() => handleTempUnitChange('C')}\n//                   />\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\n//                 </div>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='fahrenheit'\n//                     checked={tempUnit === 'F'}\n//                     onChange={() => handleTempUnitChange('F')}\n//                   />\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-3'></div>\n//               <div className='col-lg-6'>\n//                 {error && (\n//                   <div className='alert alert-danger' role='alert'>\n//                     {error}\n//                   </div>\n//                 )}\n\n//                 {weatherData && (\n//                   <div className='text-center'>\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\n//                     <p>Last Updated: {lastUpdated}</p>\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\n//                   </div>\n//                 )}\n//               </div>\n//               <div className='col-lg-3'></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default WeatherApp;\n\n// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//   const [activeCity, setActiveCity] = useState('Delhi');\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n//   const [lastUpdated, setLastUpdated] = useState(null);\n\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n\n//   const getWeatherData = async (city) => {\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch weather data');\n//       }\n//       const data = await response.json();\n//       setWeatherData(data);\n//       setError(null);\n//       setLastUpdated(new Date().toLocaleTimeString());\n//     } catch (err) {\n//       setError(err.message);\n//       setWeatherData(null);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial data fetch\n//     getWeatherData(activeCity);\n\n//     // Set up interval to fetch data every 5 minutes\n//     const intervalId = setInterval(() => {\n//       getWeatherData(activeCity);\n//     }, 300000); // 300000 ms = 5 minutes\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, [activeCity]);\n\n//   const handleTempUnitChange = (unit) => {\n//     setTempUnit(unit);\n//   };\n\n//   const convertTemperature = (tempK) => {\n//     if (tempUnit === 'F') {\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\n//     }\n//     return (tempK - 273.15).toFixed(2);\n//   };\n\n//   const formatTimestamp = (timestamp) => {\n//     return new Date(timestamp * 1000).toLocaleTimeString();\n//   };\n\n//   return (\n//     <section>\n//       <div className='container'>\n//         <div className='row mt-5'>\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\n//             Weather Data\n//           </div>\n//         </div>\n//         <div className='row'>\n//           <div className='col-lg-12 p-5 text-center'>\n//             <div className='btn-group'>\n//               {cities.map((city) => (\n//                 <button\n//                   key={city}\n//                   className={`btn btn-outline-dark fw-bold ${\n//                     activeCity === city ? 'active' : ''\n//                   }`}\n//                   onClick={() => {\n//                     setActiveCity(city);\n//                     getWeatherData(city);\n//                   }}\n//                 >\n//                   {city}\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//         <div className='row mb-5'>\n//           <div className='container p-5 feedback-box'>\n//             <div className='row'>\n//               <h3 className='text-center'>\n//                 {activeCity} Weather Data\n//               </h3>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-12 text-center'>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='celsius'\n//                     checked={tempUnit === 'C'}\n//                     onChange={() => handleTempUnitChange('C')}\n//                   />\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\n//                 </div>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='fahrenheit'\n//                     checked={tempUnit === 'F'}\n//                     onChange={() => handleTempUnitChange('F')}\n//                   />\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-3'></div>\n//               <div className='col-lg-6'>\n//                 {error && (\n//                   <div className='alert alert-danger' role='alert'>\n//                     {error}\n//                   </div>\n//                 )}\n\n//                 {weatherData && (\n//                   <div className='text-center'>\n//                     <h4> <i class=\"fa-solid fa-cloud\"></i>Main Condition: {weatherData.weather[0].main}</h4>\n//                     <p> <i class=\"fa-solid fa-temperature-full\"></i> Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\n//                     <p>  <i class=\"fa-solid fa-temperature-full\"></i> Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\n//                     <p>  <i class=\"fa-regular fa-clock\"></i> Last Updated: {lastUpdated}</p>\n//                     <p>  <i class=\"fa-regular fa-clock\"></i> Data Time: {formatTimestamp(weatherData.dt)}</p>\n//                   </div>\n//                 )}\n//               </div>\n//               <div className='col-lg-3'></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default WeatherApp;\n\n// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//   const [activeCity, setActiveCity] = useState('Delhi');\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n//   const [lastUpdated, setLastUpdated] = useState(null);\n\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n\n//   const getWeatherData = async (city) => {\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch weather data');\n//       }\n//       const data = await response.json();\n//       setWeatherData(data);\n//       setError(null);\n//       setLastUpdated(new Date().toLocaleTimeString());\n//     } catch (err) {\n//       setError(err.message);\n//       setWeatherData(null);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial data fetch\n//     getWeatherData(activeCity);\n\n//     // Set up interval to fetch data every 5 minutes\n//     const intervalId = setInterval(() => {\n//       getWeatherData(activeCity);\n//     }, 300000); // 300000 ms = 5 minutes\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, [activeCity]);\n\n//   const handleTempUnitChange = (unit) => {\n//     setTempUnit(unit);\n//   };\n\n//   const convertTemperature = (tempK) => {\n//     if (tempUnit === 'F') {\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\n//     }\n//     return (tempK - 273.15).toFixed(2);\n//   };\n\n//   const formatTimestamp = (timestamp) => {\n//     return new Date(timestamp * 1000).toLocaleTimeString();\n//   };\n\n//   return (\n//     <section>\n//       <div className='container'>\n//         <div className='row mt-5'>\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\n//             Weather Data\n//           </div>\n//         </div>\n//         <div className='row'>\n//           <div className='col-lg-12 p-5 text-center'>\n//             <div className='btn-group'>\n//               {cities.map((city) => (\n//                 <button\n//                   key={city}\n//                   className={`btn btn-outline-dark fw-bold ${\n//                     activeCity === city ? 'active' : ''\n//                   }`}\n//                   onClick={() => {\n//                     setActiveCity(city);\n//                     getWeatherData(city);\n//                   }}\n//                 >\n//                   {city}\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//         <div className='row mb-5'>\n//           <div className='container p-5 feedback-box'>\n//             <div className='row'>\n//               <h3 className='text-center'>\n//                 {activeCity} Weather Data\n//               </h3>\n//             </div>\n\n//             <div className='row mb-3'>\n//               <div className='col-lg-12 text-center'>\n//                 <div className='btn-group'>\n//                   <button\n//                     className={`btn btn-outline-dark fw-bold ${\n//                       tempUnit === 'C' ? 'active' : ''\n//                     }`}\n//                     onClick={() => handleTempUnitChange('C')}\n//                   >\n//                     Celsius\n//                   </button>\n//                   <button\n//                     className={`btn btn-outline-dark fw-bold ${\n//                       tempUnit === 'F' ? 'active' : ''\n//                     }`}\n//                     onClick={() => handleTempUnitChange('F')}\n//                   >\n//                     Fahrenheit\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {error && (\n//               <div className='alert alert-danger text-center' role='alert'>\n//                 {error}\n//               </div>\n//             )}\n\n//             {weatherData && (\n//               <div className='row text-center'>\n//                 <div className='col-lg-4'>\n//                   <div className='display-4'>\n//                     <i className='fa-solid fa-temperature-full'></i> \n//                     <span className='d-block'>{convertTemperature(weatherData.main.temp)}°{tempUnit}</span>\n//                     <span className='small d-block'>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</span>\n//                   </div>\n//                 </div>\n//                 <div className='col-lg-4'>\n//                   <h2 className='display-5'>\n//                     <i className='fa-solid fa-cloud'></i> \n//                     <span className='d-block'>{weatherData.weather[0].main}</span>\n//                   </h2>\n//                 </div>\n//                 <div className='col-lg-4'>\n//                   <div className='display-6'>\n//                     <i className='fa-regular fa-clock'></i> \n//                     <span className='d-block'>Last Updated: {lastUpdated}</span>\n//                     <span className='small d-block'>Data Time: {formatTimestamp(weatherData.dt)}</span>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [activeCity, setActiveCity] = useState('Delhi');\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n  const getWeatherData = async city => {\n    const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch weather data');\n      }\n      const data = await response.json();\n      console.log(weatherData);\n      setWeatherData(data);\n      setError(null);\n      setLastUpdated(new Date().toLocaleTimeString());\n      console.log(weatherData);\n      // Get the current date and time\n      const now = new Date();\n      const day = now.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n      const hourlyTime = now.toTimeString().split(' ')[0]; // Format as HH:MM:SS\n\n      // Check if the current time is exactly at the hour\n      if (now.getMinutes() === 0) {\n        // If it is exactly at the hour, send the data to the backend\n        await postWeatherDataToBackend(data, city, day, hourlyTime);\n      }\n    } catch (err) {\n      setError(err.message);\n      setWeatherData(null);\n    }\n  };\n\n  // Function to send the data to the backend\n  const postWeatherDataToBackend = async (data, city, day, hourlyTime) => {\n    try {\n      const backendUrl = 'http://localhost:5557/weather';\n      const payload = {\n        ...data,\n        // Existing weather data\n        city,\n        // City name\n        day,\n        // Day for the weather data\n        hourlyTime // Hourly time for the weather data\n      };\n\n      const response = await fetch(backendUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload) // Sending the structured payload to the backend\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to post weather data to backend');\n      }\n      console.log('Weather data successfully posted to backend');\n    } catch (err) {\n      console.error('Error posting weather data to backend:', err);\n    }\n  };\n  useEffect(() => {\n    // Initial data fetch\n    getWeatherData(activeCity);\n\n    // Set up interval to fetch data every 5 minutes\n    const intervalId = setInterval(() => {\n      getWeatherData(activeCity);\n    }, 60000); // 300000 ms = 5 minutes\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [activeCity]);\n  const handleTempUnitChange = unit => {\n    setTempUnit(unit);\n  };\n  const convertTemperature = tempK => {\n    if (tempUnit === 'F') {\n      return ((tempK - 273.15) * 9 / 5 + 32).toFixed(2);\n    }\n    return (tempK - 273.15).toFixed(2);\n  };\n  const formatTimestamp = timestamp => {\n    return new Date(timestamp * 1000).toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Weather Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: cities.map(city => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeCity === city ? 'active' : ''}`,\n              onClick: () => {\n                setActiveCity(city);\n                getWeatherData(city);\n              },\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeCity, \" Weather Data\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-12 text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"btn-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `btn btn-outline-dark fw-bold ${tempUnit === 'C' ? 'active' : ''}`,\n                  onClick: () => handleTempUnitChange('C'),\n                  children: \"Celsius\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `btn btn-outline-dark fw-bold ${tempUnit === 'F' ? 'active' : ''}`,\n                  onClick: () => handleTempUnitChange('F'),\n                  children: \"Fahrenheit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger text-center\",\n            role: \"alert\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 15\n          }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row text-center align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"border p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"display-6\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa-solid fa-temperature-full me-2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 23\n                  }, this), \"Temperature: \", convertTemperature(weatherData.main.temp), \"\\xB0\", tempUnit]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"display-6 mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa-solid fa-thermometer-half me-2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 645,\n                    columnNumber: 23\n                  }, this), \"Feels Like: \", convertTemperature(weatherData.main.feels_like), \"\\xB0\", tempUnit]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"display-5\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa-solid fa-cloud me-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 21\n                }, this), weatherData.weather[0].main]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-4\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"border p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"display-6\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa-regular fa-clock me-2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 663,\n                    columnNumber: 23\n                  }, this), \"Last Updated: \", lastUpdated]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 662,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"display-6 mt-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa-regular fa-calendar me-2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 667,\n                    columnNumber: 23\n                  }, this), \"Data Time: \", formatTimestamp(weatherData.dt)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 661,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 571,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"4zSpKRhRwoVWJ/8S7U9SAEVfECo=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherApp","_s","activeCity","setActiveCity","weatherData","setWeatherData","error","setError","tempUnit","setTempUnit","lastUpdated","setLastUpdated","cities","getWeatherData","city","apiKey","url","response","fetch","ok","Error","data","json","console","log","Date","toLocaleTimeString","now","day","toISOString","split","hourlyTime","toTimeString","getMinutes","postWeatherDataToBackend","err","message","backendUrl","payload","method","headers","body","JSON","stringify","intervalId","setInterval","clearInterval","handleTempUnitChange","unit","convertTemperature","tempK","toFixed","formatTimestamp","timestamp","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","role","main","temp","feels_like","weather","dt","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/weather/reactapp/src/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const WeatherApp = () => {\r\n//   const [activeCity, setActiveCity] = useState('Delhi');\r\n//   const [weatherData, setWeatherData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n//   const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n//   const getWeatherData = async (city) => {\r\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch weather data');\r\n//       }\r\n//       const data = await response.json();\r\n//       setWeatherData(data);\r\n//       setError(null);\r\n//       setLastUpdated(new Date().toLocaleTimeString());\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setWeatherData(null);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial data fetch\r\n//     getWeatherData(activeCity);\r\n\r\n//     // Set up interval to fetch data every 5 minutes\r\n//     const intervalId = setInterval(() => {\r\n//       getWeatherData(activeCity);\r\n//     }, 300000); // 300000 ms = 5 minutes\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, [activeCity]);\r\n\r\n//   const handleTempUnitChange = (unit) => {\r\n//     setTempUnit(unit);\r\n//   };\r\n\r\n//   const convertTemperature = (tempK) => {\r\n//     if (tempUnit === 'F') {\r\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n//     }\r\n//     return (tempK - 273.15).toFixed(2);\r\n//   };\r\n\r\n//   const formatTimestamp = (timestamp) => {\r\n//     return new Date(timestamp * 1000).toLocaleTimeString();\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className='container'>\r\n//         <div className='row mt-5'>\r\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n//             Weather Data\r\n//           </div>\r\n//         </div>\r\n//         <div className='row'>\r\n//           <div className='col-lg-12 p-5 text-center'>\r\n//             <div className='btn-group'>\r\n//               {cities.map((city) => (\r\n//                 <button\r\n//                   key={city}\r\n//                   className={`btn btn-outline-dark fw-bold ${\r\n//                     activeCity === city ? 'active' : ''\r\n//                   }`}\r\n//                   onClick={() => {\r\n//                     setActiveCity(city);\r\n//                     getWeatherData(city);\r\n//                   }}\r\n//                 >\r\n//                   {city}\r\n//                 </button>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className='row mb-5'>\r\n//           <div className='container p-5 feedback-box'>\r\n//             <div className='row'>\r\n//               <h3 className='text-center'>\r\n//                 {activeCity} Weather Data\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-12 text-center'>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='celsius'\r\n//                     checked={tempUnit === 'C'}\r\n//                     onChange={() => handleTempUnitChange('C')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\r\n//                 </div>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='fahrenheit'\r\n//                     checked={tempUnit === 'F'}\r\n//                     onChange={() => handleTempUnitChange('F')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-3'></div>\r\n//               <div className='col-lg-6'>\r\n//                 {error && (\r\n//                   <div className='alert alert-danger' role='alert'>\r\n//                     {error}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {weatherData && (\r\n//                   <div className='text-center'>\r\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\r\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\r\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\r\n//                     <p>Last Updated: {lastUpdated}</p>\r\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//               <div className='col-lg-3'></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default WeatherApp;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n\r\n// const WeatherApp = () => {\r\n//   const [activeCity, setActiveCity] = useState('Delhi');\r\n//   const [weatherData, setWeatherData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n//   const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n//   const getWeatherData = async (city) => {\r\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch weather data');\r\n//       }\r\n//       const data = await response.json();\r\n//       setWeatherData(data);\r\n//       setError(null);\r\n//       setLastUpdated(new Date().toLocaleTimeString());\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setWeatherData(null);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial data fetch\r\n//     getWeatherData(activeCity);\r\n\r\n//     // Set up interval to fetch data every 5 minutes\r\n//     const intervalId = setInterval(() => {\r\n//       getWeatherData(activeCity);\r\n//     }, 300000); // 300000 ms = 5 minutes\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, [activeCity]);\r\n\r\n//   const handleTempUnitChange = (unit) => {\r\n//     setTempUnit(unit);\r\n//   };\r\n\r\n//   const convertTemperature = (tempK) => {\r\n//     if (tempUnit === 'F') {\r\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n//     }\r\n//     return (tempK - 273.15).toFixed(2);\r\n//   };\r\n\r\n//   const formatTimestamp = (timestamp) => {\r\n//     return new Date(timestamp * 1000).toLocaleTimeString();\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className='container'>\r\n//         <div className='row mt-5'>\r\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n//             Weather Data\r\n//           </div>\r\n//         </div>\r\n//         <div className='row'>\r\n//           <div className='col-lg-12 p-5 text-center'>\r\n//             <div className='btn-group'>\r\n//               {cities.map((city) => (\r\n//                 <button\r\n//                   key={city}\r\n//                   className={`btn btn-outline-dark fw-bold ${\r\n//                     activeCity === city ? 'active' : ''\r\n//                   }`}\r\n//                   onClick={() => {\r\n//                     setActiveCity(city);\r\n//                     getWeatherData(city);\r\n//                   }}\r\n//                 >\r\n//                   {city}\r\n//                 </button>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className='row mb-5'>\r\n//           <div className='container p-5 feedback-box'>\r\n//             <div className='row'>\r\n//               <h3 className='text-center'>\r\n//                 {activeCity} Weather Data\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-12 text-center'>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='celsius'\r\n//                     checked={tempUnit === 'C'}\r\n//                     onChange={() => handleTempUnitChange('C')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\r\n//                 </div>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='fahrenheit'\r\n//                     checked={tempUnit === 'F'}\r\n//                     onChange={() => handleTempUnitChange('F')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-3'></div>\r\n//               <div className='col-lg-6'>\r\n//                 {error && (\r\n//                   <div className='alert alert-danger' role='alert'>\r\n//                     {error}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {weatherData && (\r\n//                   <div className='text-center'>\r\n//                     <h4> <i class=\"fa-solid fa-cloud\"></i>Main Condition: {weatherData.weather[0].main}</h4>\r\n//                     <p> <i class=\"fa-solid fa-temperature-full\"></i> Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\r\n//                     <p>  <i class=\"fa-solid fa-temperature-full\"></i> Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\r\n//                     <p>  <i class=\"fa-regular fa-clock\"></i> Last Updated: {lastUpdated}</p>\r\n//                     <p>  <i class=\"fa-regular fa-clock\"></i> Data Time: {formatTimestamp(weatherData.dt)}</p>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//               <div className='col-lg-3'></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default WeatherApp;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const WeatherApp = () => {\r\n//   const [activeCity, setActiveCity] = useState('Delhi');\r\n//   const [weatherData, setWeatherData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n//   const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n//   const getWeatherData = async (city) => {\r\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch weather data');\r\n//       }\r\n//       const data = await response.json();\r\n//       setWeatherData(data);\r\n//       setError(null);\r\n//       setLastUpdated(new Date().toLocaleTimeString());\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setWeatherData(null);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial data fetch\r\n//     getWeatherData(activeCity);\r\n\r\n//     // Set up interval to fetch data every 5 minutes\r\n//     const intervalId = setInterval(() => {\r\n//       getWeatherData(activeCity);\r\n//     }, 300000); // 300000 ms = 5 minutes\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, [activeCity]);\r\n\r\n//   const handleTempUnitChange = (unit) => {\r\n//     setTempUnit(unit);\r\n//   };\r\n\r\n//   const convertTemperature = (tempK) => {\r\n//     if (tempUnit === 'F') {\r\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n//     }\r\n//     return (tempK - 273.15).toFixed(2);\r\n//   };\r\n\r\n//   const formatTimestamp = (timestamp) => {\r\n//     return new Date(timestamp * 1000).toLocaleTimeString();\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className='container'>\r\n//         <div className='row mt-5'>\r\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n//             Weather Data\r\n//           </div>\r\n//         </div>\r\n//         <div className='row'>\r\n//           <div className='col-lg-12 p-5 text-center'>\r\n//             <div className='btn-group'>\r\n//               {cities.map((city) => (\r\n//                 <button\r\n//                   key={city}\r\n//                   className={`btn btn-outline-dark fw-bold ${\r\n//                     activeCity === city ? 'active' : ''\r\n//                   }`}\r\n//                   onClick={() => {\r\n//                     setActiveCity(city);\r\n//                     getWeatherData(city);\r\n//                   }}\r\n//                 >\r\n//                   {city}\r\n//                 </button>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className='row mb-5'>\r\n//           <div className='container p-5 feedback-box'>\r\n//             <div className='row'>\r\n//               <h3 className='text-center'>\r\n//                 {activeCity} Weather Data\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className='row mb-3'>\r\n//               <div className='col-lg-12 text-center'>\r\n//                 <div className='btn-group'>\r\n//                   <button\r\n//                     className={`btn btn-outline-dark fw-bold ${\r\n//                       tempUnit === 'C' ? 'active' : ''\r\n//                     }`}\r\n//                     onClick={() => handleTempUnitChange('C')}\r\n//                   >\r\n//                     Celsius\r\n//                   </button>\r\n//                   <button\r\n//                     className={`btn btn-outline-dark fw-bold ${\r\n//                       tempUnit === 'F' ? 'active' : ''\r\n//                     }`}\r\n//                     onClick={() => handleTempUnitChange('F')}\r\n//                   >\r\n//                     Fahrenheit\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {error && (\r\n//               <div className='alert alert-danger text-center' role='alert'>\r\n//                 {error}\r\n//               </div>\r\n//             )}\r\n\r\n//             {weatherData && (\r\n//               <div className='row text-center'>\r\n//                 <div className='col-lg-4'>\r\n//                   <div className='display-4'>\r\n//                     <i className='fa-solid fa-temperature-full'></i> \r\n//                     <span className='d-block'>{convertTemperature(weatherData.main.temp)}°{tempUnit}</span>\r\n//                     <span className='small d-block'>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</span>\r\n//                   </div>\r\n//                 </div>\r\n//                 <div className='col-lg-4'>\r\n//                   <h2 className='display-5'>\r\n//                     <i className='fa-solid fa-cloud'></i> \r\n//                     <span className='d-block'>{weatherData.weather[0].main}</span>\r\n//                   </h2>\r\n//                 </div>\r\n//                 <div className='col-lg-4'>\r\n//                   <div className='display-6'>\r\n//                     <i className='fa-regular fa-clock'></i> \r\n//                     <span className='d-block'>Last Updated: {lastUpdated}</span>\r\n//                     <span className='small d-block'>Data Time: {formatTimestamp(weatherData.dt)}</span>\r\n//                   </div>\r\n//                 </div>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default WeatherApp;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst WeatherApp = () => {\r\n  const [activeCity, setActiveCity] = useState('Delhi');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n  const getWeatherData = async (city) => {\r\n    const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch weather data');\r\n        }\r\n        const data = await response.json();\r\n        console.log(weatherData);\r\n        setWeatherData(data);\r\n        setError(null);\r\n        setLastUpdated(new Date().toLocaleTimeString());\r\n          console.log(weatherData);\r\n        // Get the current date and time\r\n        const now = new Date();\r\n        const day = now.toISOString().split('T')[0]; // Format as YYYY-MM-DD\r\n        const hourlyTime = now.toTimeString().split(' ')[0]; // Format as HH:MM:SS\r\n\r\n        // Check if the current time is exactly at the hour\r\n        if (now.getMinutes() === 0) {\r\n            // If it is exactly at the hour, send the data to the backend\r\n            await postWeatherDataToBackend(data, city, day, hourlyTime);\r\n        }\r\n    } catch (err) {\r\n        setError(err.message);\r\n        setWeatherData(null);\r\n    }\r\n};\r\n\r\n\r\n\r\n// Function to send the data to the backend\r\nconst postWeatherDataToBackend = async (data, city, day, hourlyTime) => {\r\n  try {\r\n      const backendUrl = 'http://localhost:5557/weather';\r\n      const payload = {\r\n          ...data,          // Existing weather data\r\n          city,             // City name\r\n          day,              // Day for the weather data\r\n          hourlyTime        // Hourly time for the weather data\r\n      };\r\n\r\n      const response = await fetch(backendUrl, {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(payload), // Sending the structured payload to the backend\r\n      });\r\n\r\n      if (!response.ok) {\r\n          throw new Error('Failed to post weather data to backend');\r\n      }\r\n\r\n      console.log('Weather data successfully posted to backend');\r\n  } catch (err) {\r\n      console.error('Error posting weather data to backend:', err);\r\n  }\r\n};\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Initial data fetch\r\n    getWeatherData(activeCity);\r\n\r\n    // Set up interval to fetch data every 5 minutes\r\n    const intervalId = setInterval(() => {\r\n      getWeatherData(activeCity);\r\n    }, 60000); // 300000 ms = 5 minutes\r\n\r\n    // Cleanup interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, [activeCity]);\r\n\r\n  const handleTempUnitChange = (unit) => {\r\n    setTempUnit(unit);\r\n  };\r\n\r\n  const convertTemperature = (tempK) => {\r\n    if (tempUnit === 'F') {\r\n      return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n    }\r\n    return (tempK - 273.15).toFixed(2);\r\n  };\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    return new Date(timestamp * 1000).toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className='container'>\r\n        <div className='row mt-5'>\r\n          <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n            Weather Data\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col-lg-12 p-5 text-center'>\r\n            <div className='btn-group'>\r\n              {cities.map((city) => (\r\n                <button\r\n                  key={city}\r\n                  className={`btn btn-outline-dark fw-bold ${\r\n                    activeCity === city ? 'active' : ''\r\n                  }`}\r\n                  onClick={() => {\r\n                    setActiveCity(city);\r\n                    getWeatherData(city);\r\n                  }}\r\n                >\r\n                  {city}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='row mb-5'>\r\n          <div className='container p-5 feedback-box'>\r\n            <div className='row'>\r\n              <h3 className='text-center'>\r\n                {activeCity} Weather Data\r\n              </h3>\r\n            </div>\r\n\r\n            <div className='row mb-3'>\r\n              <div className='col-lg-12 text-center'>\r\n                <div className='btn-group'>\r\n                  <button\r\n                    className={`btn btn-outline-dark fw-bold ${\r\n                      tempUnit === 'C' ? 'active' : ''\r\n                    }`}\r\n                    onClick={() => handleTempUnitChange('C')}\r\n                  >\r\n                    Celsius\r\n                  </button>\r\n                  <button\r\n                    className={`btn btn-outline-dark fw-bold ${\r\n                      tempUnit === 'F' ? 'active' : ''\r\n                    }`}\r\n                    onClick={() => handleTempUnitChange('F')}\r\n                  >\r\n                    Fahrenheit\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {error && (\r\n              <div className='alert alert-danger text-center' role='alert'>\r\n                {error}\r\n              </div>\r\n            )}\r\n\r\n            {weatherData && (\r\n              <div className='row text-center align-items-center'>\r\n                {/* Left Side */}\r\n                <div className='col-lg-4'>\r\n                  <div className='border p-3'>\r\n                    <div className='display-6'>\r\n                      <i className='fa-solid fa-temperature-full me-2'></i> \r\n                      Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}\r\n                    </div>\r\n                    <div className='display-6 mt-3'>\r\n                      <i className='fa-solid fa-thermometer-half me-2'></i> \r\n                      Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Middle */}\r\n                <div className='col-lg-4'>\r\n                  <h2 className='display-5'>\r\n                    <i className='fa-solid fa-cloud me-2'></i> \r\n                    {weatherData.weather[0].main}\r\n                  </h2>\r\n                </div>\r\n                \r\n                {/* Right Side */}\r\n                <div className='col-lg-4'>\r\n                  <div className='border p-3'>\r\n                    <div className='display-6'>\r\n                      <i className='fa-regular fa-clock me-2'></i> \r\n                      Last Updated: {lastUpdated}\r\n                    </div>\r\n                    <div className='display-6 mt-3'>\r\n                      <i className='fa-regular fa-calendar me-2'></i> \r\n                      Data Time: {formatTimestamp(weatherData.dt)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,OAAO,CAAC;EACrD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}