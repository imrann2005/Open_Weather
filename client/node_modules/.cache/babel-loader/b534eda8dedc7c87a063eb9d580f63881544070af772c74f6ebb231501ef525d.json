{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Desktop\\\\weather\\\\reactapp\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//   const [activeCity, setActiveCity] = useState('Delhi');\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n//   const [lastUpdated, setLastUpdated] = useState(null);\n\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n\n//   const getWeatherData = async (city) => {\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch weather data');\n//       }\n//       const data = await response.json();\n//       setWeatherData(data);\n//       setError(null);\n//       setLastUpdated(new Date().toLocaleTimeString());\n//     } catch (err) {\n//       setError(err.message);\n//       setWeatherData(null);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial data fetch\n//     getWeatherData(activeCity);\n\n//     // Set up interval to fetch data every 5 minutes\n//     const intervalId = setInterval(() => {\n//       getWeatherData(activeCity);\n//     }, 300000); // 300000 ms = 5 minutes\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, [activeCity]);\n\n//   const handleTempUnitChange = (unit) => {\n//     setTempUnit(unit);\n//   };\n\n//   const convertTemperature = (tempK) => {\n//     if (tempUnit === 'F') {\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\n//     }\n//     return (tempK - 273.15).toFixed(2);\n//   };\n\n//   const formatTimestamp = (timestamp) => {\n//     return new Date(timestamp * 1000).toLocaleTimeString();\n//   };\n\n//   return (\n//     <section>\n//       <div className='container'>\n//         <div className='row mt-5'>\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\n//             Weather Data\n//           </div>\n//         </div>\n//         <div className='row'>\n//           <div className='col-lg-12 p-5 text-center'>\n//             <div className='btn-group'>\n//               {cities.map((city) => (\n//                 <button\n//                   key={city}\n//                   className={`btn btn-outline-dark fw-bold ${\n//                     activeCity === city ? 'active' : ''\n//                   }`}\n//                   onClick={() => {\n//                     setActiveCity(city);\n//                     getWeatherData(city);\n//                   }}\n//                 >\n//                   {city}\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//         <div className='row mb-5'>\n//           <div className='container p-5 feedback-box'>\n//             <div className='row'>\n//               <h3 className='text-center'>\n//                 {activeCity} Weather Data\n//               </h3>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-12 text-center'>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='celsius'\n//                     checked={tempUnit === 'C'}\n//                     onChange={() => handleTempUnitChange('C')}\n//                   />\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\n//                 </div>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='fahrenheit'\n//                     checked={tempUnit === 'F'}\n//                     onChange={() => handleTempUnitChange('F')}\n//                   />\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-3'></div>\n//               <div className='col-lg-6'>\n//                 {error && (\n//                   <div className='alert alert-danger' role='alert'>\n//                     {error}\n//                   </div>\n//                 )}\n\n//                 {weatherData && (\n//                   <div className='text-center'>\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\n//                     <p>Last Updated: {lastUpdated}</p>\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\n//                   </div>\n//                 )}\n//               </div>\n//               <div className='col-lg-3'></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default WeatherApp;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [activeCity, setActiveCity] = useState('Delhi');\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n  const getWeatherData = async city => {\n    const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch weather data');\n      }\n      const data = await response.json();\n      setWeatherData(data);\n      setError(null);\n      setLastUpdated(new Date().toLocaleTimeString());\n    } catch (err) {\n      setError(err.message);\n      setWeatherData(null);\n    }\n  };\n  useEffect(() => {\n    // Initial data fetch\n    getWeatherData(activeCity);\n\n    // Set up interval to fetch data every 5 minutes\n    const intervalId = setInterval(() => {\n      getWeatherData(activeCity);\n    }, 300000); // 300000 ms = 5 minutes\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [activeCity]);\n  const handleTempUnitChange = unit => {\n    setTempUnit(unit);\n  };\n  const convertTemperature = tempK => {\n    if (tempUnit === 'F') {\n      return ((tempK - 273.15) * 9 / 5 + 32).toFixed(2);\n    }\n    return (tempK - 273.15).toFixed(2);\n  };\n  const formatTimestamp = timestamp => {\n    return new Date(timestamp * 1000).toLocaleTimeString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 text-center fs-1 fw-bold text-dark\",\n          children: \"Weather Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-12 p-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: cities.map(city => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `btn btn-outline-dark fw-bold ${activeCity === city ? 'active' : ''}`,\n              onClick: () => {\n                setActiveCity(city);\n                getWeatherData(city);\n              },\n              children: city\n            }, city, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container p-5 feedback-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: [activeCity, \" Weather Data\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-12 text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-check form-check-inline\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-check-input\",\n                  type: \"radio\",\n                  name: \"tempUnit\",\n                  id: \"celsius\",\n                  checked: tempUnit === 'C',\n                  onChange: () => handleTempUnitChange('C')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-check-label\",\n                  htmlFor: \"celsius\",\n                  children: \"Celsius\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-check form-check-inline\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-check-input\",\n                  type: \"radio\",\n                  name: \"tempUnit\",\n                  id: \"fahrenheit\",\n                  checked: tempUnit === 'F',\n                  onChange: () => handleTempUnitChange('F')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-check-label\",\n                  htmlFor: \"fahrenheit\",\n                  children: \"Fahrenheit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-6\",\n              children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"alert alert-danger\",\n                role: \"alert\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    class: \"fa-light fa-cloud-sun\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 26\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-print fa-2x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 64\n                  }, this), \"Main Condition: \", weatherData.weather[0].main]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"  \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    class: \"fa-light fa-temperature-three-quarters\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 26\n                  }, this), \" Temperature: \", convertTemperature(weatherData.main.temp), \"\\xB0\", tempUnit]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"  \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-print fa-2x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 26\n                  }, this), \" Feels Like: \", convertTemperature(weatherData.main.feels_like), \"\\xB0\", tempUnit]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"  \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-print fa-2x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 26\n                  }, this), \" Last Updated: \", lastUpdated]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"  \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa fa-print fa-2x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 26\n                  }, this), \" Data Time: \", formatTimestamp(weatherData.dt)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"4zSpKRhRwoVWJ/8S7U9SAEVfECo=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherApp","_s","activeCity","setActiveCity","weatherData","setWeatherData","error","setError","tempUnit","setTempUnit","lastUpdated","setLastUpdated","cities","getWeatherData","city","apiKey","url","response","fetch","ok","Error","data","json","Date","toLocaleTimeString","err","message","intervalId","setInterval","clearInterval","handleTempUnitChange","unit","convertTemperature","tempK","toFixed","formatTimestamp","timestamp","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","type","name","id","checked","onChange","htmlFor","role","class","weather","main","temp","feels_like","dt","_c","$RefreshReg$"],"sources":["C:/Users/ashut/Desktop/weather/reactapp/src/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const WeatherApp = () => {\r\n//   const [activeCity, setActiveCity] = useState('Delhi');\r\n//   const [weatherData, setWeatherData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n//   const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n//   const getWeatherData = async (city) => {\r\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch weather data');\r\n//       }\r\n//       const data = await response.json();\r\n//       setWeatherData(data);\r\n//       setError(null);\r\n//       setLastUpdated(new Date().toLocaleTimeString());\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setWeatherData(null);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial data fetch\r\n//     getWeatherData(activeCity);\r\n\r\n//     // Set up interval to fetch data every 5 minutes\r\n//     const intervalId = setInterval(() => {\r\n//       getWeatherData(activeCity);\r\n//     }, 300000); // 300000 ms = 5 minutes\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, [activeCity]);\r\n\r\n//   const handleTempUnitChange = (unit) => {\r\n//     setTempUnit(unit);\r\n//   };\r\n\r\n//   const convertTemperature = (tempK) => {\r\n//     if (tempUnit === 'F') {\r\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n//     }\r\n//     return (tempK - 273.15).toFixed(2);\r\n//   };\r\n\r\n//   const formatTimestamp = (timestamp) => {\r\n//     return new Date(timestamp * 1000).toLocaleTimeString();\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className='container'>\r\n//         <div className='row mt-5'>\r\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n//             Weather Data\r\n//           </div>\r\n//         </div>\r\n//         <div className='row'>\r\n//           <div className='col-lg-12 p-5 text-center'>\r\n//             <div className='btn-group'>\r\n//               {cities.map((city) => (\r\n//                 <button\r\n//                   key={city}\r\n//                   className={`btn btn-outline-dark fw-bold ${\r\n//                     activeCity === city ? 'active' : ''\r\n//                   }`}\r\n//                   onClick={() => {\r\n//                     setActiveCity(city);\r\n//                     getWeatherData(city);\r\n//                   }}\r\n//                 >\r\n//                   {city}\r\n//                 </button>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className='row mb-5'>\r\n//           <div className='container p-5 feedback-box'>\r\n//             <div className='row'>\r\n//               <h3 className='text-center'>\r\n//                 {activeCity} Weather Data\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-12 text-center'>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='celsius'\r\n//                     checked={tempUnit === 'C'}\r\n//                     onChange={() => handleTempUnitChange('C')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\r\n//                 </div>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='fahrenheit'\r\n//                     checked={tempUnit === 'F'}\r\n//                     onChange={() => handleTempUnitChange('F')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-3'></div>\r\n//               <div className='col-lg-6'>\r\n//                 {error && (\r\n//                   <div className='alert alert-danger' role='alert'>\r\n//                     {error}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {weatherData && (\r\n//                   <div className='text-center'>\r\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\r\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\r\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\r\n//                     <p>Last Updated: {lastUpdated}</p>\r\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//               <div className='col-lg-3'></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default WeatherApp;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n\r\nconst WeatherApp = () => {\r\n  const [activeCity, setActiveCity] = useState('Delhi');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n  const getWeatherData = async (city) => {\r\n    const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch weather data');\r\n      }\r\n      const data = await response.json();\r\n      setWeatherData(data);\r\n      setError(null);\r\n      setLastUpdated(new Date().toLocaleTimeString());\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setWeatherData(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initial data fetch\r\n    getWeatherData(activeCity);\r\n\r\n    // Set up interval to fetch data every 5 minutes\r\n    const intervalId = setInterval(() => {\r\n      getWeatherData(activeCity);\r\n    }, 300000); // 300000 ms = 5 minutes\r\n\r\n    // Cleanup interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, [activeCity]);\r\n\r\n  const handleTempUnitChange = (unit) => {\r\n    setTempUnit(unit);\r\n  };\r\n\r\n  const convertTemperature = (tempK) => {\r\n    if (tempUnit === 'F') {\r\n      return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n    }\r\n    return (tempK - 273.15).toFixed(2);\r\n  };\r\n\r\n  const formatTimestamp = (timestamp) => {\r\n    return new Date(timestamp * 1000).toLocaleTimeString();\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className='container'>\r\n        <div className='row mt-5'>\r\n          <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n            Weather Data\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className='col-lg-12 p-5 text-center'>\r\n            <div className='btn-group'>\r\n              {cities.map((city) => (\r\n                <button\r\n                  key={city}\r\n                  className={`btn btn-outline-dark fw-bold ${\r\n                    activeCity === city ? 'active' : ''\r\n                  }`}\r\n                  onClick={() => {\r\n                    setActiveCity(city);\r\n                    getWeatherData(city);\r\n                  }}\r\n                >\r\n                  {city}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='row mb-5'>\r\n          <div className='container p-5 feedback-box'>\r\n            <div className='row'>\r\n              <h3 className='text-center'>\r\n                {activeCity} Weather Data\r\n              </h3>\r\n            </div>\r\n\r\n            <div className='row'>\r\n              <div className='col-lg-12 text-center'>\r\n                <div className='form-check form-check-inline'>\r\n                  <input\r\n                    className='form-check-input'\r\n                    type='radio'\r\n                    name='tempUnit'\r\n                    id='celsius'\r\n                    checked={tempUnit === 'C'}\r\n                    onChange={() => handleTempUnitChange('C')}\r\n                  />\r\n                  <label className='form-check-label' htmlFor='celsius'>Celsius</label>\r\n                </div>\r\n                <div className='form-check form-check-inline'>\r\n                  <input\r\n                    className='form-check-input'\r\n                    type='radio'\r\n                    name='tempUnit'\r\n                    id='fahrenheit'\r\n                    checked={tempUnit === 'F'}\r\n                    onChange={() => handleTempUnitChange('F')}\r\n                  />\r\n                  <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='row'>\r\n              <div className='col-lg-3'></div>\r\n              <div className='col-lg-6'>\r\n                {error && (\r\n                  <div className='alert alert-danger' role='alert'>\r\n                    {error}\r\n                  </div>\r\n                )}\r\n\r\n                {weatherData && (\r\n                  <div className='text-center'>\r\n                    <h4> <i class=\"fa-light fa-cloud-sun\"></i> <i className=\"fa fa-print fa-2x\"></i>Main Condition: {weatherData.weather[0].main}</h4>\r\n                    <p>  <i class=\"fa-light fa-temperature-three-quarters\"></i> Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\r\n                    <p>  <i className=\"fa fa-print fa-2x\"></i> Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\r\n                    <p>  <i className=\"fa fa-print fa-2x\"></i> Last Updated: {lastUpdated}</p>\r\n                    <p>  <i className=\"fa fa-print fa-2x\"></i> Data Time: {formatTimestamp(weatherData.dt)}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className='col-lg-3'></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,OAAO,CAAC;EACrD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMgB,MAAM,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}