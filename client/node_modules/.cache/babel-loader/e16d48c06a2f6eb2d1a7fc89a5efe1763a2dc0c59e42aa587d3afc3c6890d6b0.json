{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n\n// const WeatherApp = () => {\n//   const [activeCity, setActiveCity] = useState('Delhi');\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\n//   const [lastUpdated, setLastUpdated] = useState(null);\n\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\n\n//   const getWeatherData = async (city) => {\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch weather data');\n//       }\n//       const data = await response.json();\n//       setWeatherData(data);\n//       setError(null);\n//       setLastUpdated(new Date().toLocaleTimeString());\n//     } catch (err) {\n//       setError(err.message);\n//       setWeatherData(null);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // Initial data fetch\n//     getWeatherData(activeCity);\n\n//     // Set up interval to fetch data every 5 minutes\n//     const intervalId = setInterval(() => {\n//       getWeatherData(activeCity);\n//     }, 300000); // 300000 ms = 5 minutes\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n//   }, [activeCity]);\n\n//   const handleTempUnitChange = (unit) => {\n//     setTempUnit(unit);\n//   };\n\n//   const convertTemperature = (tempK) => {\n//     if (tempUnit === 'F') {\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\n//     }\n//     return (tempK - 273.15).toFixed(2);\n//   };\n\n//   const formatTimestamp = (timestamp) => {\n//     return new Date(timestamp * 1000).toLocaleTimeString();\n//   };\n\n//   return (\n//     <section>\n//       <div className='container'>\n//         <div className='row mt-5'>\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\n//             Weather Data\n//           </div>\n//         </div>\n//         <div className='row'>\n//           <div className='col-lg-12 p-5 text-center'>\n//             <div className='btn-group'>\n//               {cities.map((city) => (\n//                 <button\n//                   key={city}\n//                   className={`btn btn-outline-dark fw-bold ${\n//                     activeCity === city ? 'active' : ''\n//                   }`}\n//                   onClick={() => {\n//                     setActiveCity(city);\n//                     getWeatherData(city);\n//                   }}\n//                 >\n//                   {city}\n//                 </button>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n//         <div className='row mb-5'>\n//           <div className='container p-5 feedback-box'>\n//             <div className='row'>\n//               <h3 className='text-center'>\n//                 {activeCity} Weather Data\n//               </h3>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-12 text-center'>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='celsius'\n//                     checked={tempUnit === 'C'}\n//                     onChange={() => handleTempUnitChange('C')}\n//                   />\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\n//                 </div>\n//                 <div className='form-check form-check-inline'>\n//                   <input\n//                     className='form-check-input'\n//                     type='radio'\n//                     name='tempUnit'\n//                     id='fahrenheit'\n//                     checked={tempUnit === 'F'}\n//                     onChange={() => handleTempUnitChange('F')}\n//                   />\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className='row'>\n//               <div className='col-lg-3'></div>\n//               <div className='col-lg-6'>\n//                 {error && (\n//                   <div className='alert alert-danger' role='alert'>\n//                     {error}\n//                   </div>\n//                 )}\n\n//                 {weatherData && (\n//                   <div className='text-center'>\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\n//                     <p>Last Updated: {lastUpdated}</p>\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\n//                   </div>\n//                 )}\n//               </div>\n//               <div className='col-lg-3'></div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </section>\n//   );\n// };\n\n// export default WeatherApp;","map":{"version":3,"names":[],"sources":["C:/Users/ashut/Desktop/weather/reactapp/src/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const WeatherApp = () => {\r\n//   const [activeCity, setActiveCity] = useState('Delhi');\r\n//   const [weatherData, setWeatherData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [tempUnit, setTempUnit] = useState('C'); // Celsius by default\r\n//   const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n//   const cities = ['Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Hyderabad', 'Kolkata'];\r\n\r\n//   const getWeatherData = async (city) => {\r\n//     const apiKey = '48ed01bb564f5b6a1bebbc4c43c23e08';\r\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch weather data');\r\n//       }\r\n//       const data = await response.json();\r\n//       setWeatherData(data);\r\n//       setError(null);\r\n//       setLastUpdated(new Date().toLocaleTimeString());\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//       setWeatherData(null);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Initial data fetch\r\n//     getWeatherData(activeCity);\r\n\r\n//     // Set up interval to fetch data every 5 minutes\r\n//     const intervalId = setInterval(() => {\r\n//       getWeatherData(activeCity);\r\n//     }, 300000); // 300000 ms = 5 minutes\r\n\r\n//     // Cleanup interval on component unmount\r\n//     return () => clearInterval(intervalId);\r\n//   }, [activeCity]);\r\n\r\n//   const handleTempUnitChange = (unit) => {\r\n//     setTempUnit(unit);\r\n//   };\r\n\r\n//   const convertTemperature = (tempK) => {\r\n//     if (tempUnit === 'F') {\r\n//       return ((tempK - 273.15) * 9/5 + 32).toFixed(2);\r\n//     }\r\n//     return (tempK - 273.15).toFixed(2);\r\n//   };\r\n\r\n//   const formatTimestamp = (timestamp) => {\r\n//     return new Date(timestamp * 1000).toLocaleTimeString();\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <div className='container'>\r\n//         <div className='row mt-5'>\r\n//           <div className='col-lg-12 text-center fs-1 fw-bold text-dark'>\r\n//             Weather Data\r\n//           </div>\r\n//         </div>\r\n//         <div className='row'>\r\n//           <div className='col-lg-12 p-5 text-center'>\r\n//             <div className='btn-group'>\r\n//               {cities.map((city) => (\r\n//                 <button\r\n//                   key={city}\r\n//                   className={`btn btn-outline-dark fw-bold ${\r\n//                     activeCity === city ? 'active' : ''\r\n//                   }`}\r\n//                   onClick={() => {\r\n//                     setActiveCity(city);\r\n//                     getWeatherData(city);\r\n//                   }}\r\n//                 >\r\n//                   {city}\r\n//                 </button>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         <div className='row mb-5'>\r\n//           <div className='container p-5 feedback-box'>\r\n//             <div className='row'>\r\n//               <h3 className='text-center'>\r\n//                 {activeCity} Weather Data\r\n//               </h3>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-12 text-center'>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='celsius'\r\n//                     checked={tempUnit === 'C'}\r\n//                     onChange={() => handleTempUnitChange('C')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='celsius'>Celsius</label>\r\n//                 </div>\r\n//                 <div className='form-check form-check-inline'>\r\n//                   <input\r\n//                     className='form-check-input'\r\n//                     type='radio'\r\n//                     name='tempUnit'\r\n//                     id='fahrenheit'\r\n//                     checked={tempUnit === 'F'}\r\n//                     onChange={() => handleTempUnitChange('F')}\r\n//                   />\r\n//                   <label className='form-check-label' htmlFor='fahrenheit'>Fahrenheit</label>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className='row'>\r\n//               <div className='col-lg-3'></div>\r\n//               <div className='col-lg-6'>\r\n//                 {error && (\r\n//                   <div className='alert alert-danger' role='alert'>\r\n//                     {error}\r\n//                   </div>\r\n//                 )}\r\n\r\n//                 {weatherData && (\r\n//                   <div className='text-center'>\r\n//                     <h4>Main Condition: {weatherData.weather[0].main}</h4>\r\n//                     <p>Temperature: {convertTemperature(weatherData.main.temp)}°{tempUnit}</p>\r\n//                     <p>Feels Like: {convertTemperature(weatherData.main.feels_like)}°{tempUnit}</p>\r\n//                     <p>Last Updated: {lastUpdated}</p>\r\n//                     <p>Data Time: {formatTimestamp(weatherData.dt)}</p>\r\n//                   </div>\r\n//                 )}\r\n//               </div>\r\n//               <div className='col-lg-3'></div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default WeatherApp;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}